#!/usr/bin/env node
'use strict';

var glob = require("glob")
var jade = require('jade')
var fs = require('fs');
var argv = require('minimist')(process.argv);
var Extractor = require('angular-gettext-tools').Extractor;
var Compiler = require('angular-gettext-tools').Compiler;
var path = require('path')
var context

if (argv.context) context = require(path.resolve(__dirname, argv.context))

if (!argv.dest) {
  throw new Error('dest parameter missed');
}

if (argv.compile) {
    compile(argv);
} else {
    extract(argv);
}

// add obj['markerName'] = obj['marker-name'] etc.
function objToUpperCase(obj) {
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i].replace(/-(.)/g, function (m, $1) {
            return $1.toUpperCase();
        });
        
        obj[key] = obj[keys[i]];
    }
    
    return obj;
}

function compile(options) {
    var gettextCompiler = new Compiler(objToUpperCase(options));
    
    if (options.format && !Compiler.hasFormat(options.format)) {
        throw new Error('There is no "' + options.format + '" output format.');
    }
    
    var output;
    glob(options.files, null, function (err, fileNames) {
        if (err) {
            throw err;
        }
        
        output = gettextCompiler.convertPo(fileNames.map(function(fileName) {
            return fs.readFileSync(fileName, options.encoding || 'utf-8');
        }));
    }).on('end', function finish(fileNames) {
        console.log('Finished compiling ' + options.files +', read '+fileNames.length+' files.');
        fs.writeFile(options.dest, output, null, function(err) {
            if (err) {
              throw err;
            }
            
            console.log('All files processed, stored in a file ' + options.dest);
        });
    });
}

function extract(options) {
    var gettextExtractor = new Extractor(objToUpperCase(options));

    glob(options.files, null, function (err, fileNames) {
        if (err) {
            throw err;
        }
        fileNames.forEach(function (filename) {
            var content = fs.readFileSync(filename, 'utf8');
            var locals
            if (context) locals = { config: context }
            var jadeContent = jade.compile(content, { filename: filename, client: true, pretty: true })(locals)
            gettextExtractor.parse(filename.replace('jade', 'html'), jadeContent);
        });
    }).on('end', function finish(fileNames) {
        console.log('Finished parsing ' + options.files +', read '+fileNames.length+' files.');

        fs.writeFile(options.dest, gettextExtractor.toString().replace('.html:', '.jade:'), null, function (err) {
          if (err){
            throw err;
          }
          console.log('All files processed, stored in a file ' + options.dest);
        });
    });
}
